generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider          = "mysql"
  url               = env("MYSQL_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  cpf           String?
  password      String?
  tel_celular   String?
  tel_fixo      String?        @default("N/A")
  data_nasc     String?
  accounts      Account[]
  address       Address[]
  orders        Orders[]
  sessions      Session[]
  favorites     favorites[]
  ShoppingCart  ShoppingCart[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  AddressId     String  @id @default(cuid())
  endereco      String
  bairro        String
  identificacao String
  cep           String
  cidade        String
  estado        String
  numero        String
  complemento   String?
  referencia    String?
  userId        String
  User   User     @relation(fields: [userId], references: [id])
  Orders Orders[]

  @@index([userId], map: "Address_userId_fkey")
}

model Orders {
  ordeId     String   @id
  totalPrice String?
  products   String?
  date       DateTime
  userId     String
  adrressId  String
  address    Address  @relation(fields: [adrressId], references: [AddressId])
  user       User     @relation(fields: [userId], references: [id])

  @@index([adrressId], map: "Orders_adrressId_fkey")
  @@index([userId], map: "Orders_userId_fkey")
}

model Category {
  categoryId String     @id @default(cuid())
  category   String     @unique
  Products   Products[]
}

model SubCategory {
  subCategoryId String     @id @default(cuid())
  subCategory   String     @unique
  Products      Products[]
}

model Products {
  productId      String         @id @default(cuid())
  name           String
  quantity       Int
  price          Decimal
  description    String
  specifications String         @db.LongText
  imageCover     String
  images         String
  category       Category       @relation(fields: [categoryId], references: [categoryId])
  categoryId     String
  subCategory    SubCategory    @relation(fields: [subCategoryId], references: [subCategoryId])
  subCategoryId  String
  favorites      favorites[]
  ShoppingCart   ShoppingCart[]

  @@fulltext([name])
}

model favorites {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Products @relation(fields: [productId], references: [productId])
  productId String
}

model ShoppingCart {
  itemId     String   @id
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  products   Products @relation(fields: [productId], references: [productId])
  productId  String
  totalPrice String
}

model Logs {
  logId    String @id @default(cuid())
  logLevel String
  message  String
}
